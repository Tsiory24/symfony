<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[

'App__Entity__Project__CLASSMETADATA__' => 0,
'App__Entity__Task__CLASSMETADATA__' => 1,
'App__Entity__User__CLASSMETADATA__' => 2,
'App__Entity__Promotion__CLASSMETADATA__' => 3,
'App__Entity__Semestre__CLASSMETADATA__' => 4,
'App__Entity__Students__CLASSMETADATA__' => 5,

], [

0 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Project',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ProjectRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'description' => $o[3],
                        'deletedAt' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'description' => 'description',
                        'deleted_at' => 'deletedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'description' => 'description',
                        'deletedAt' => 'deleted_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'project',
                    ],
                ],
                'associationMappings' => [
                    [
                        'tasks' => $o[5],
                    ],
                ],
                'idGenerator' => [
                    $o[6],
                ],
                'name' => [
                    'App\\Entity\\Project',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'description',
                    'deletedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'description',
                    'deleted_at',
                ],
                'length' => [
                    2 => 255,
                ],
                'nullable' => [
                    3 => true,
                    true,
                ],
                'fetch' => [
                    5 => 2,
                ],
                'sourceEntity' => [
                    5 => 'App\\Entity\\Project',
                ],
                'mappedBy' => [
                    5 => 'project',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    5 => 'tasks',
                ],
                'targetEntity' => [
                    5 => 'App\\Entity\\Task',
                ],
            ],
        ],
        $o[0],
        []
    );
},
1 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyOwningSideMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinTableMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinTableMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Task',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\TaskRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'title' => $o[2],
                        'slug' => $o[3],
                        'description' => $o[4],
                        'estimates' => $o[5],
                        'createdAt' => $o[6],
                        'updatedAt' => $o[7],
                        'dueDate' => $o[8],
                        'deletedAt' => $o[9],
                        'status' => $o[10],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'slug' => 'slug',
                        'description' => 'description',
                        'estimates' => 'estimates',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                        'due_date' => 'dueDate',
                        'deleted_at' => 'deletedAt',
                        'status' => 'status',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'slug' => 'slug',
                        'description' => 'description',
                        'estimates' => 'estimates',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                        'dueDate' => 'due_date',
                        'deletedAt' => 'deleted_at',
                        'status' => 'status',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'task',
                    ],
                ],
                'associationMappings' => [
                    [
                        'project' => $o[11],
                        'assignees' => $o[13],
                    ],
                ],
                'idGenerator' => [
                    $o[17],
                ],
                'name' => [
                    'App\\Entity\\Task',
                    12 => 'project_id',
                    14 => 'task_user',
                    'task_id',
                    'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'string',
                    'integer',
                    'datetime_immutable',
                    'datetime_immutable',
                    'datetime_immutable',
                    'datetime_immutable',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'title',
                    'slug',
                    'description',
                    'estimates',
                    'createdAt',
                    'updatedAt',
                    'dueDate',
                    'deletedAt',
                    'status',
                ],
                'columnName' => [
                    1 => 'id',
                    'title',
                    'slug',
                    'description',
                    'estimates',
                    'created_at',
                    'updated_at',
                    'due_date',
                    'deleted_at',
                    'status',
                ],
                'length' => [
                    2 => 255,
                    255,
                    1000,
                ],
                'nullable' => [
                    4 => true,
                    true,
                    8 => true,
                    true,
                    12 => true,
                ],
                'enumType' => [
                    10 => 'App\\Enum\\TaskStatus',
                ],
                'fetch' => [
                    11 => 2,
                    13 => 2,
                ],
                'sourceEntity' => [
                    11 => 'App\\Entity\\Task',
                    13 => 'App\\Entity\\Task',
                ],
                'inversedBy' => [
                    11 => 'tasks',
                    13 => 'tasks',
                ],
                'sourceToTargetKeyColumns' => [
                    11 => [
                        'project_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    11 => [
                        'id' => 'project_id',
                    ],
                ],
                'joinColumns' => [
                    11 => [
                        $o[12],
                    ],
                    14 => [
                        $o[15],
                    ],
                ],
                'joinColumnFieldNames' => [
                    11 => [
                        'project_id' => 'project_id',
                    ],
                ],
                'unique' => [
                    12 => false,
                ],
                'referencedColumnName' => [
                    12 => 'id',
                    15 => 'id',
                    'id',
                ],
                'isOnDeleteCascade' => [
                    13 => true,
                ],
                'joinTable' => [
                    13 => $o[14],
                ],
                'joinTableColumns' => [
                    13 => [
                        'task_id',
                        'user_id',
                    ],
                ],
                'relationToSourceKeyColumns' => [
                    13 => [
                        'task_id' => 'id',
                    ],
                ],
                'relationToTargetKeyColumns' => [
                    13 => [
                        'user_id' => 'id',
                    ],
                ],
                'inverseJoinColumns' => [
                    14 => [
                        $o[16],
                    ],
                ],
                'onDelete' => [
                    15 => 'CASCADE',
                    'CASCADE',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    11 => 'project',
                    13 => 'assignees',
                ],
                'targetEntity' => [
                    11 => 'App\\Entity\\Project',
                    13 => 'App\\Entity\\User',
                ],
            ],
        ],
        $o[0],
        []
    );
},
2 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToManyInverseSideMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\User',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\UserRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'email' => $o[2],
                        'roles' => $o[3],
                        'password' => $o[4],
                        'username' => $o[5],
                        'apiToken' => $o[6],
                        'deletedAt' => $o[7],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'email' => 'email',
                        'roles' => 'roles',
                        'password' => 'password',
                        'username' => 'username',
                        'api_token' => 'apiToken',
                        'deleted_at' => 'deletedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'email' => 'email',
                        'roles' => 'roles',
                        'password' => 'password',
                        'username' => 'username',
                        'apiToken' => 'api_token',
                        'deletedAt' => 'deleted_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'user',
                        'uniqueConstraints' => [
                            'UNIQ_IDENTIFIER_EMAIL' => [
                                'fields' => [
                                    'email',
                                ],
                            ],
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'tasks' => $o[8],
                    ],
                ],
                'idGenerator' => [
                    $o[9],
                ],
                'name' => [
                    'App\\Entity\\User',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'json',
                    'string',
                    'string',
                    'string',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'email',
                    'roles',
                    'password',
                    'username',
                    'apiToken',
                    'deletedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'email',
                    'roles',
                    'password',
                    'username',
                    'api_token',
                    'deleted_at',
                ],
                'length' => [
                    2 => 180,
                    5 => 255,
                    255,
                ],
                'nullable' => [
                    6 => true,
                    true,
                ],
                'fetch' => [
                    8 => 2,
                ],
                'sourceEntity' => [
                    8 => 'App\\Entity\\User',
                ],
                'mappedBy' => [
                    8 => 'assignees',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    8 => 'tasks',
                ],
                'targetEntity' => [
                    8 => 'App\\Entity\\Task',
                ],
            ],
        ],
        $o[0],
        []
    );
},
3 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Promotion',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\PromotionRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'date_promotion' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date_promotion' => 'date_promotion',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'date_promotion' => 'date_promotion',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'promotion',
                    ],
                ],
                'associationMappings' => [
                    [
                        'semestre' => $o[3],
                    ],
                ],
                'idGenerator' => [
                    $o[4],
                ],
                'name' => [
                    'App\\Entity\\Promotion',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'date',
                ],
                'fieldName' => [
                    1 => 'id',
                    'date_promotion',
                ],
                'columnName' => [
                    1 => 'id',
                    'date_promotion',
                ],
                'fetch' => [
                    3 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\Promotion',
                ],
                'mappedBy' => [
                    3 => 'promotion',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'semestre',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Students',
                ],
            ],
        ],
        $o[0],
        []
    );
},
4 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Semestre',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\SemestreRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom_semestre' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom_semestre' => 'nom_semestre',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom_semestre' => 'nom_semestre',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'semestre',
                    ],
                ],
                'associationMappings' => [
                    [
                        'students' => $o[3],
                    ],
                ],
                'idGenerator' => [
                    $o[4],
                ],
                'name' => [
                    'App\\Entity\\Semestre',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom_semestre',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom_semestre',
                ],
                'length' => [
                    2 => 3,
                ],
                'fetch' => [
                    3 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\Semestre',
                ],
                'mappedBy' => [
                    3 => 'semestre',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'students',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Students',
                ],
            ],
        ],
        $o[0],
        []
    );
},
5 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Students',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\StudentsRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                        'date_naissance' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom_etudiant' => 'nom',
                        'date_naissance' => 'date_naissance',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom_etudiant',
                        'date_naissance' => 'date_naissance',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'Etudiant',
                    ],
                ],
                'associationMappings' => [
                    [
                        'promotion' => $o[4],
                        'semestre' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\Students',
                    5 => 'promotion_id',
                    7 => 'semestre_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'date',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                    'date_naissance',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom_etudiant',
                    'date_naissance',
                ],
                'length' => [
                    2 => 200,
                ],
                'fetch' => [
                    4 => 2,
                    6 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\Students',
                    6 => 'App\\Entity\\Students',
                ],
                'inversedBy' => [
                    4 => 'semestre',
                    6 => 'students',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'promotion_id' => 'id',
                    ],
                    6 => [
                        'semestre_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'promotion_id',
                    ],
                    6 => [
                        'id' => 'semestre_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'promotion_id' => 'promotion_id',
                    ],
                    6 => [
                        'semestre_id' => 'semestre_id',
                    ],
                ],
                'unique' => [
                    5 => false,
                    7 => false,
                ],
                'nullable' => [
                    5 => false,
                    7 => false,
                ],
                'referencedColumnName' => [
                    5 => 'id',
                    7 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'promotion',
                    6 => 'semestre',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Promotion',
                    6 => 'App\\Entity\\Semestre',
                ],
            ],
        ],
        $o[0],
        []
    );
},

]];
